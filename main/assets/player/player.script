-- Player logic

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 450
-- gravity pulling the player down in pixel units
local gravity = -1000
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 600


-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local input_attack = hash("attack")

local anim_jump = hash("jump")
local anim_run = hash("run")
local anim_idle = hash("idle")
local anim_attack = hash("attack")

-- local state,previous_state
local isAttacking = false


function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	
	-- activate camera attached to the player collection
	-- this will send camera updates to the render script

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- the currently playing animation
	self.anim = nil
	self.isLookingLeft = false

	self.isAttacking = false
	self.attack = false
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else 
			play_animation(self, anim_run)
		end

		if self.isLookingLeft then
			sprite.set_hflip("#sprite", true)
		else
			sprite.set_hflip("#sprite", false)
		end

		if self.isAttacking then
			self.isAttacking = false
			msg.post("#sprite", "play_animation", { id = hash("attack") })		
		end
		
	elseif not self.ground_contact and self.isLookingLeft then
		sprite.set_hflip("#sprite", true)
		play_animation(self, anim_jump)
	elseif not self.ground_contact and not self.isLookingLeft then
		sprite.set_hflip("#sprite", false)
		play_animation(self, anim_jump)
	end
end

local function debug(self)
	if self.velocity.y > 0 then
		label.set_text("Debug", "JUMP")
	elseif self.velocity.x == 0 then
		label.set_text("Debug", "IDLE")
	elseif self.velocity.x ~= 0 then
		label.set_text("Debug", "WALK")
	elseif self.isAttacking then
		label.set_text("Debug", "ATTACK")
	end
end

function update(self, dt)
	-- apply gravity

	self.velocity.y = self.velocity.y + gravity * dt
	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)
	-- update animations based on state (ground, air, move and idle)
	update_animations(self)
	-- if pos.x > 400 then
	-- 	msg.post("camera", "acquire_camera_focus")
	-- else
	-- 	msg.post("camera", "release_camera_focus")
	-- end
	debug(self)
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false

	print(self.isAttacking)
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end
	-- collided with a wall
	-- stop horizontal movement
	if normal.x ~= 0 and math.abs(normal.x) ~= math.abs(self.velocity.x) then
		self.velocity.x = 0
	end

	if normal.x < self.velocity.x then
		self.velocity.x = 0
	end

	if normal.y > 0.6 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < 1 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function attack(self)
	if self.velocity.x == 0 then
		self.isAttacking = true
	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
		play_animation(self, anim_jump)
	else 	
		abort_jump(self)
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		walk(self, -action.value)
		self.isLookingLeft = true
	elseif action_id == input_right then
		walk(self, action.value)
		self.isLookingLeft = false
	elseif action_id == hash("attack") and action.pressed then
		attack(self)
		
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end		
	end
end